대원별 입력 정보 저장 객체: inputData
입력된 대원들의 ID를, 따로 inputData.opIDs 배열에 저장.
대원별로 opID라는 이름의 객체를 inputData에 추가.
예)
"inputData": {
	"1": {...},
	"15": {...}
}

대원별 입력 정보는 아래와 같이 저장함.

// opID
"1": {
	"elite": {
		"current": 0,
		"target": 2
	},
	"opLevel": {
		"current": 20,
		"target": 1
	},
	// 현재, 목표에서 모두 비활성화된 스킬은 넣지 않음.
	"skillLevel": {	// 아래 예시는, 1스 7->7, 2스 7->10, 3스 8->9인 경우임.
		"common": {
			"current": 7,
			"target": 7
		},
		
		"mastery": {
			"0": {	// 1스
				"current": 0,
				"target": 0
			},
			
			"1": {	// 2스
				"current": 0,
				"target": 3
			},
			
			...		// ...
		}
	}
}

***잘못된 입력 처리 및 안내방식***
공통: 문제가 있는 입력필드의 테두리를 빨간색으로 강조 표시. 문제가 사라지면 원래대로 돌아감.
( 클래스를 추가/삭제하는 식으로 처리 )

목표 정예화가 현재 정예화 단계보다 낮지 못하도록 스크립트로 처리
(
	현재 정예화 단계를 높여서 그런 현상이 일어났다면, 목표 정예화를 강제로 현재 정예화 단계 이상으로 맞춤
	추가로, 목표 정예화를 현재 단계보다 낮은 값으로 고를 수 없게 미리 option을 disabled 해놓기도 할 것임
)

레벨의 범위가 이상하다면 '제목: 기타노', '내용: 현재 레벨 입력값이 너무 낮습니다.' 식으로 오류메시지 띄움
(
	정수가 아닌 값(실수, 문자열 등)일 경우 '레벨을 자연수로 입력해주세요.'
	1 미만일 경우 '[현재/목표] 레벨이 너무 낮습니다.'
	상한 레벨 초과일 경우 '[현재/목표] 레벨이 너무 높습니다.'
	정예화 단계의 변화가 없는데도 목표 레벨이 현재 레벨보다 낮을 경우 '목표 레벨이 현재 레벨보다 낮습니다.'
)

***계산 방식***
추가되어 있는 폼으로부터 각 오퍼레이터의 ID를 읽고, ID를 통해 오퍼레이터의 정보(레어도, 육성데이터 등)를 읽어들인다.
해당 폼에 입력되어 있는 정보를 바탕으로 계산한다.
계산된 결과를 출력한다.

일단, 재료부터 콘솔로 출력